{"ast":null,"code":"import { useMemo } from 'react';\nimport { useWebGLVersion } from '../hooks';\nexport function useAttribute(gl, size, buffer, getOptions) {\n  var memoized = useMemo(function () {\n    return function (location) {\n      if (location >= 0) {\n        var options = getOptions ? getOptions(gl) : {};\n        var target = options.target || gl.ARRAY_BUFFER;\n        gl.enableVertexAttribArray(location);\n        gl.bindBuffer(target, buffer);\n        var type = options.type || gl.FLOAT;\n        var normalized = options.normalized || false;\n        var stride = options.stride || 0;\n        var offset = options.offset || 0;\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      }\n    };\n  }, [gl, size, buffer, getOptions]);\n  return memoized;\n}\nexport function useInstancedAttribute(gl, size, buffer, getOptions) {\n  var version = useWebGLVersion();\n  var memoized = useMemo(function () {\n    return function (location, ext) {\n      if (location >= 0) {\n        var options = getOptions ? getOptions(gl) : {};\n        var target = options.target || gl.ARRAY_BUFFER;\n        gl.enableVertexAttribArray(location);\n        gl.bindBuffer(target, buffer);\n        var type = options.type || gl.FLOAT;\n        var normalized = options.normalized || false;\n        var stride = options.stride || 0;\n        var offset = options.offset || 0;\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n\n        if (version === 2) {\n          // @ts-ignore\n          gl.vertexAttribDivisor(location, 1);\n        } else if (ext) {\n          ext.vertexAttribDivisorANGLE(location, 1);\n        } else {\n          console.log('Instanced attributes require WebGL 2 or ANGLE extension');\n        }\n      }\n    };\n  }, [gl, size, buffer, version, getOptions]);\n  return memoized;\n}","map":null,"metadata":{},"sourceType":"module"}