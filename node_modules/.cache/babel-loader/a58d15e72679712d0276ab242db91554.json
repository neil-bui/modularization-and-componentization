{"ast":null,"code":"// Adapted from:\n//https://github.com/mrdoob/three.js/blob/dev/src/geometries/BoxGeometry.js\n// @author mrdoob / http://mrdoob.com/\n// @author Mugen87 / https://github.com/Mugen87\n// The MIT License\n// Copyright Â© 2010-2019 three.js authors\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default function boxGeometry() {\n  var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var wCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var hCount = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var dCount = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  wCount = Math.floor(wCount);\n  hCount = Math.floor(hCount);\n  dCount = Math.floor(dCount);\n  var indices = [];\n  var vertices = [];\n  var normals = [];\n  var uvs = [];\n  var numberOfVertices = 0;\n  buildPlane(2, 1, 0, -1, -1, depth, height, +width, dCount, hCount);\n  buildPlane(2, 1, 0, +1, -1, depth, height, -width, dCount, hCount);\n  buildPlane(0, 2, 1, +1, +1, width, depth, +height, wCount, dCount);\n  buildPlane(0, 2, 1, +1, -1, width, depth, -height, wCount, dCount);\n  buildPlane(0, 1, 2, +1, -1, width, height, +depth, wCount, hCount);\n  buildPlane(0, 1, 2, -1, -1, width, height, -depth, wCount, hCount);\n\n  function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY) {\n    var segmentWidth = width / gridX;\n    var segmentHeight = height / gridY;\n    var widthHalf = width / 2;\n    var heightHalf = height / 2;\n    var depthHalf = depth / 2;\n    var gridX1 = gridX + 1;\n    var gridY1 = gridY + 1;\n    var vertexCounter = 0;\n    var ix, iy;\n    var vector = new Array(3);\n\n    for (iy = 0; iy < gridY1; iy++) {\n      var y = iy * segmentHeight - heightHalf;\n\n      for (ix = 0; ix < gridX1; ix++) {\n        var x = ix * segmentWidth - widthHalf;\n        vector[u] = x * udir;\n        vector[v] = y * vdir;\n        vector[w] = depthHalf;\n        vertices.push.apply(vertices, vector);\n        vector[u] = 0;\n        vector[v] = 0;\n        vector[w] = depth > 0 ? 1 : -1;\n        normals.push.apply(normals, vector);\n        uvs.push(ix / gridX);\n        uvs.push(1 - iy / gridY);\n        vertexCounter += 1;\n      }\n    }\n\n    for (iy = 0; iy < gridY; iy++) {\n      for (ix = 0; ix < gridX; ix++) {\n        var a = numberOfVertices + ix + gridX1 * iy;\n        var b = numberOfVertices + ix + gridX1 * (iy + 1);\n        var c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n        var d = numberOfVertices + (ix + 1) + gridX1 * iy;\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    numberOfVertices += vertexCounter;\n  }\n\n  return {\n    indices: indices,\n    vertices: vertices,\n    normals: normals,\n    uvs: uvs\n  };\n}","map":null,"metadata":{},"sourceType":"module"}