{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Group } from '@vx/group';\nimport { tree, treemap, cluster, pack, partition } from 'd3-hierarchy';\nHierarchyDefaultLink.propTypes = {\n  link: PropTypes.object\n};\n\nfunction HierarchyDefaultLink(_ref) {\n  var link = _ref.link;\n  return React.createElement('line', {\n    x1: link.source.x,\n    y1: link.source.y,\n    x2: link.target.x,\n    y2: link.target.y,\n    strokeWidth: 2,\n    stroke: '#999',\n    strokeOpacity: 0.6\n  });\n}\n\nHierarchyDefaultNode.propTypes = {\n  node: PropTypes.object\n};\n\nfunction HierarchyDefaultNode(_ref) {\n  var node = _ref.node;\n  return React.createElement('circle', {\n    cx: node.x,\n    cy: node.y,\n    r: 15,\n    fill: '#21D4FD'\n  });\n}\n\nvar objectWithoutProperties = function objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nTree.propTypes = {\n  root: PropTypes.object.isRequired,\n  children: PropTypes.func,\n  top: PropTypes.number,\n  left: PropTypes.number,\n  className: PropTypes.string,\n  size: PropTypes.arrayOf(PropTypes.number),\n  nodeSize: PropTypes.arrayOf(PropTypes.number),\n  separation: PropTypes.func,\n  linkComponent: PropTypes.any,\n  nodeComponent: PropTypes.any\n};\n\nfunction Tree(_ref) {\n  var top = _ref.top,\n      left = _ref.left,\n      className = _ref.className,\n      root = _ref.root,\n      size = _ref.size,\n      nodeSize = _ref.nodeSize,\n      separation = _ref.separation,\n      children = _ref.children,\n      _ref$linkComponent = _ref.linkComponent,\n      linkComponent = _ref$linkComponent === undefined ? HierarchyDefaultLink : _ref$linkComponent,\n      _ref$nodeComponent = _ref.nodeComponent,\n      nodeComponent = _ref$nodeComponent === undefined ? HierarchyDefaultNode : _ref$nodeComponent,\n      restProps = objectWithoutProperties(_ref, ['top', 'left', 'className', 'root', 'size', 'nodeSize', 'separation', 'children', 'linkComponent', 'nodeComponent']);\n  var tree$$1 = tree();\n  if (size) tree$$1.size(size);\n  if (nodeSize) tree$$1.nodeSize(nodeSize);\n  if (separation) tree$$1.separation(separation);\n  var data = tree$$1(root);\n\n  if (!!children) {\n    return React.createElement(Group, {\n      top: top,\n      left: left,\n      className: cx('vx-tree', className)\n    }, children({\n      data: data\n    }));\n  }\n\n  return React.createElement(Group, {\n    top: top,\n    left: left,\n    className: cx('vx-tree', className)\n  }, linkComponent && data.links().map(function (link, i) {\n    return React.createElement(Group, {\n      key: 'tree-link-' + i\n    }, React.createElement(linkComponent, {\n      link: link\n    }));\n  }), nodeComponent && data.descendants().map(function (node, i) {\n    return React.createElement(Group, {\n      key: 'tree-node-' + i\n    }, React.createElement(nodeComponent, {\n      node: node\n    }));\n  }));\n}\n\nTreemap.propTypes = {\n  root: PropTypes.object.isRequired,\n  children: PropTypes.func,\n  top: PropTypes.number,\n  left: PropTypes.number,\n  className: PropTypes.string,\n  tile: PropTypes.func,\n  size: PropTypes.arrayOf(PropTypes.number),\n  round: PropTypes.bool,\n  padding: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n  paddingInner: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n  paddingOuter: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n  paddingTop: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n  paddingRight: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n  paddingBottom: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n  paddingLeft: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n  nodeComponent: PropTypes.any\n};\n\nfunction Treemap(_ref) {\n  var top = _ref.top,\n      left = _ref.left,\n      className = _ref.className,\n      root = _ref.root,\n      tile = _ref.tile,\n      size = _ref.size,\n      round = _ref.round,\n      padding = _ref.padding,\n      paddingInner = _ref.paddingInner,\n      paddingOuter = _ref.paddingOuter,\n      paddingTop = _ref.paddingTop,\n      paddingRight = _ref.paddingRight,\n      paddingBottom = _ref.paddingBottom,\n      paddingLeft = _ref.paddingLeft,\n      children = _ref.children,\n      _ref$nodeComponent = _ref.nodeComponent,\n      nodeComponent = _ref$nodeComponent === undefined ? HierarchyDefaultNode : _ref$nodeComponent,\n      restProps = objectWithoutProperties(_ref, ['top', 'left', 'className', 'root', 'tile', 'size', 'round', 'padding', 'paddingInner', 'paddingOuter', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'children', 'nodeComponent']);\n  var treemap$$1 = treemap();\n  if (tile) treemap$$1.tile(tile);\n  if (size) treemap$$1.size(size);\n  if (round) treemap$$1.round(round);\n  if (padding) treemap$$1.padding(padding);\n  if (paddingInner) treemap$$1.paddingInner(paddingInner);\n  if (paddingOuter) treemap$$1.paddingOuter(paddingOuter);\n  if (paddingTop) treemap$$1.paddingTop(paddingTop);\n  if (paddingRight) treemap$$1.paddingRight(paddingRight);\n  if (paddingBottom) treemap$$1.paddingBottom(paddingBottom);\n  if (paddingLeft) treemap$$1.paddingLeft(paddingLeft);\n  var data = treemap$$1(root);\n\n  if (!!children) {\n    return React.createElement(Group, {\n      top: top,\n      left: left,\n      className: cx('vx-treemap', className)\n    }, children({\n      data: data\n    }));\n  }\n\n  return React.createElement(Group, {\n    top: top,\n    left: left,\n    className: cx('vx-treemap', className)\n  }, nodeComponent && data.descendants().map(function (node, i) {\n    return React.createElement(Group, {\n      key: 'treemap-node-' + i\n    }, React.createElement(nodeComponent, {\n      node: node\n    }));\n  }));\n}\n\nCluster.propTypes = {\n  root: PropTypes.object.isRequired,\n  children: PropTypes.func,\n  top: PropTypes.number,\n  left: PropTypes.number,\n  className: PropTypes.string,\n  size: PropTypes.arrayOf(PropTypes.number),\n  nodeSize: PropTypes.arrayOf(PropTypes.number),\n  separation: PropTypes.func,\n  linkComponent: PropTypes.any,\n  nodeComponent: PropTypes.any\n};\n\nfunction Cluster(_ref) {\n  var top = _ref.top,\n      left = _ref.left,\n      className = _ref.className,\n      root = _ref.root,\n      size = _ref.size,\n      nodeSize = _ref.nodeSize,\n      separation = _ref.separation,\n      children = _ref.children,\n      _ref$linkComponent = _ref.linkComponent,\n      linkComponent = _ref$linkComponent === undefined ? HierarchyDefaultLink : _ref$linkComponent,\n      _ref$nodeComponent = _ref.nodeComponent,\n      nodeComponent = _ref$nodeComponent === undefined ? HierarchyDefaultNode : _ref$nodeComponent,\n      restProps = objectWithoutProperties(_ref, ['top', 'left', 'className', 'root', 'size', 'nodeSize', 'separation', 'children', 'linkComponent', 'nodeComponent']);\n  var cluster$$1 = cluster();\n  if (size) cluster$$1.size(size);\n  if (nodeSize) cluster$$1.nodeSize(nodeSize);\n  if (separation) cluster$$1.separation(separation);\n  var data = cluster$$1(root);\n\n  if (!!children) {\n    return React.createElement(Group, {\n      top: top,\n      left: left,\n      className: cx('vx-cluster', className)\n    }, children({\n      data: data\n    }));\n  }\n\n  return React.createElement(Group, {\n    top: top,\n    left: left,\n    className: cx('vx-cluster', className)\n  }, linkComponent && data.links().map(function (link, i) {\n    return React.createElement(Group, {\n      key: 'cluster-link-' + i\n    }, React.createElement(linkComponent, {\n      link: link\n    }));\n  }), nodeComponent && data.descendants().map(function (node, i) {\n    return React.createElement(Group, {\n      key: 'cluster-node-' + i\n    }, React.createElement(nodeComponent, {\n      node: node\n    }));\n  }));\n}\n\nPack.propTypes = {\n  root: PropTypes.object.isRequired,\n  children: PropTypes.func,\n  top: PropTypes.number,\n  left: PropTypes.number,\n  className: PropTypes.string,\n  radius: PropTypes.func,\n  size: PropTypes.arrayOf(PropTypes.number),\n  padding: PropTypes.number,\n  nodeComponent: PropTypes.any\n};\n\nfunction Pack(_ref) {\n  var top = _ref.top,\n      left = _ref.left,\n      className = _ref.className,\n      root = _ref.root,\n      radius = _ref.radius,\n      size = _ref.size,\n      padding = _ref.padding,\n      children = _ref.children,\n      _ref$nodeComponent = _ref.nodeComponent,\n      nodeComponent = _ref$nodeComponent === undefined ? HierarchyDefaultNode : _ref$nodeComponent,\n      restProps = objectWithoutProperties(_ref, ['top', 'left', 'className', 'root', 'radius', 'size', 'padding', 'children', 'nodeComponent']);\n  var pack$$1 = pack();\n  if (size) pack$$1.size(size);\n  if (radius !== undefined) pack$$1.radius(radius);\n  if (padding) pack$$1.padding(padding);\n  var data = pack$$1(root);\n\n  if (!!children) {\n    return React.createElement(Group, {\n      top: top,\n      left: left,\n      className: cx('vx-pack', className)\n    }, children({\n      data: data\n    }));\n  }\n\n  return React.createElement(Group, {\n    top: top,\n    left: left,\n    className: cx('vx-pack', className)\n  }, nodeComponent && data.descendants().map(function (node, i) {\n    return React.createElement(Group, {\n      key: 'pack-node-' + i\n    }, React.createElement(nodeComponent, {\n      node: node\n    }));\n  }));\n}\n\nPartition.propTypes = {\n  root: PropTypes.object.isRequired,\n  children: PropTypes.func,\n  top: PropTypes.number,\n  left: PropTypes.number,\n  className: PropTypes.string,\n  size: PropTypes.arrayOf(PropTypes.number),\n  round: PropTypes.bool,\n  padding: PropTypes.number,\n  nodeComponent: PropTypes.any\n};\n\nfunction Partition(_ref) {\n  var top = _ref.top,\n      left = _ref.left,\n      className = _ref.className,\n      root = _ref.root,\n      size = _ref.size,\n      round = _ref.round,\n      padding = _ref.padding,\n      children = _ref.children,\n      _ref$nodeComponent = _ref.nodeComponent,\n      nodeComponent = _ref$nodeComponent === undefined ? HierarchyDefaultNode : _ref$nodeComponent,\n      restProps = objectWithoutProperties(_ref, ['top', 'left', 'className', 'root', 'size', 'round', 'padding', 'children', 'nodeComponent']);\n  var partition$$1 = partition();\n  if (size) partition$$1.size(size);\n  if (round) partition$$1.round(round);\n  if (padding) partition$$1.padding(padding);\n  var data = partition$$1(root);\n\n  if (!!children) {\n    return React.createElement(Group, {\n      top: top,\n      left: left,\n      className: cx('vx-partition', className)\n    }, children({\n      data: data\n    }));\n  }\n\n  return React.createElement(Group, {\n    top: top,\n    left: left,\n    className: cx('vx-partition', className)\n  }, nodeComponent && data.descendants().map(function (node, i) {\n    return React.createElement(Group, {\n      key: 'partition-node-' + i\n    }, React.createElement(nodeComponent, {\n      node: node\n    }));\n  }));\n}\n\nexport { Tree, Treemap, Cluster, Pack, Partition, HierarchyDefaultLink, HierarchyDefaultNode };","map":null,"metadata":{},"sourceType":"module"}