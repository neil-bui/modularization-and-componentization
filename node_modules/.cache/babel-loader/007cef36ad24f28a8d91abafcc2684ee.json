{"ast":null,"code":"import { useMemo, useEffect } from 'react';\nimport { useCanvas } from '@react-vertex/core';\nimport { OrbitCamera } from './OrbitCamera';\nimport { OrbitControls } from './OrbitControls';\nexport { OrbitCamera } from './OrbitCamera';\nexport { OrbitControls } from './OrbitControls';\nexport function useOrbitCamera() {\n  var fov = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n  var aspect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var near = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var far = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;\n  var configure = arguments.length > 4 ? arguments[4] : undefined;\n  var memoized = useMemo(function () {\n    var camera = new OrbitCamera(fov, aspect, near, far);\n    configure && configure(camera);\n    return camera;\n  }, []);\n  useMemo(function () {\n    memoized.setProjection(fov, aspect, near, far);\n  }, [memoized, fov, aspect, near, far]);\n  return memoized;\n}\nexport function useOrbitControls(camera, configure) {\n  var canvas = useCanvas();\n  var memoized = useMemo(function () {\n    var controls = new OrbitControls(camera, canvas);\n    configure && configure(controls);\n    return controls;\n  }, [camera, canvas]);\n  useEffect(function () {\n    canvas.addEventListener('mousedown', memoized.onMouseDown, false);\n    canvas.addEventListener('mouseup', memoized.onMouseUp, false);\n    canvas.addEventListener('mousemove', memoized.onMouseMove, false);\n    canvas.addEventListener('touchstart', memoized.onTouchStart, false);\n    canvas.addEventListener('touchend', memoized.onTouchEnd, false);\n    canvas.addEventListener('touchmove', memoized.onTouchMove, false);\n    canvas.addEventListener('wheel', memoized.onMouseWheel, false);\n    return function () {\n      canvas.removeEventListener('mousedown', memoized.onMouseDown, false);\n      canvas.removeEventListener('mouseup', memoized.onMouseUp, false);\n      canvas.removeEventListener('mousemove', memoized.onMouseMove, false);\n      canvas.removeEventListener('touchstart', memoized.onTouchStart, false);\n      canvas.removeEventListener('touchend', memoized.onTouchEnd, false);\n      canvas.removeEventListener('touchmove', memoized.onTouchMove, false);\n      canvas.removeEventListener('wheel', memoized.onMouseWheel, false);\n    };\n  }, [canvas, memoized]);\n  return memoized;\n}","map":null,"metadata":{},"sourceType":"module"}