{"ast":null,"code":"// Adapted from:\n// https://github.com/mrdoob/three.js/blob/dev/src/geometries/TorusGeometry.js\n// @author oosmoxiecode\n// @author mrdoob / http://mrdoob.com/\n// @author Mugen87 / https://github.com/Mugen87\n// The MIT License\n// Copyright Â© 2010-2019 three.js authors\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default function torusGeometry() {\n  var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var tube = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.4;\n  var radialSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;\n  var tubularSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 6;\n  var arc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Math.PI * 2;\n  var indices = [];\n  var vertices = [];\n  var normals = [];\n  var uvs = [];\n  var center = new Array(3);\n  var vertex = new Array(3);\n  var normal = new Array(3);\n  var j, i;\n\n  for (j = 0; j <= radialSegments; j++) {\n    for (i = 0; i <= tubularSegments; i++) {\n      var u = i / tubularSegments * arc;\n      var v = j / radialSegments * Math.PI * 2;\n      vertex[0] = (radius + tube * Math.cos(v)) * Math.cos(u);\n      vertex[1] = (radius + tube * Math.cos(v)) * Math.sin(u);\n      vertex[2] = tube * Math.sin(v);\n      vertices.push.apply(vertices, vertex);\n      center[0] = radius * Math.cos(u);\n      center[1] = radius * Math.sin(u);\n      center[2] = 0;\n      normal[0] = vertex[0] - center[0];\n      normal[1] = vertex[1] - center[1];\n      normal[2] = vertex[2] - center[2];\n      var len = Math.sqrt(normal[0] * normal[0] + normal[1] * normal[1] + normal[2] * normal[2]);\n      normal[0] *= 1 / (len || 1);\n      normal[1] *= 1 / (len || 1);\n      normal[2] *= 1 / (len || 1);\n      normals.push.apply(normals, normal);\n      uvs.push(i / tubularSegments);\n      uvs.push(j / radialSegments);\n    }\n  }\n\n  for (j = 1; j <= radialSegments; j++) {\n    for (i = 1; i <= tubularSegments; i++) {\n      var a = (tubularSegments + 1) * j + i - 1;\n      var b = (tubularSegments + 1) * (j - 1) + i - 1;\n      var c = (tubularSegments + 1) * (j - 1) + i;\n      var d = (tubularSegments + 1) * j + i;\n      indices.push(a, b, d);\n      indices.push(b, c, d);\n    }\n  }\n\n  return {\n    indices: indices,\n    vertices: vertices,\n    normals: normals,\n    uvs: uvs\n  };\n}","map":null,"metadata":{},"sourceType":"module"}