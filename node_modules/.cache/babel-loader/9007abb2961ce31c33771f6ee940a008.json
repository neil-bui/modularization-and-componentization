{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport Node from './GraphNode';\nexport var isInstancedNode = Symbol('isInstancedNode');\nexport var instancedExt = 'ANGLE_instanced_arrays';\nexport var InstancedNode = /*#__PURE__*/function (_Node) {\n  _inherits(InstancedNode, _Node);\n\n  var _super = _createSuper(InstancedNode);\n\n  function InstancedNode() {\n    var _this;\n\n    _classCallCheck(this, InstancedNode);\n\n    _this = _super.call(this);\n    _this.index = void 0;\n    _this.attributes = void 0;\n    _this.drawElements = void 0;\n    _this[isInstancedNode] = true;\n    _this.index = 0;\n    _this.attributes = {};\n    return _this;\n  }\n\n  _createClass(InstancedNode, [{\n    key: \"applyProps\",\n    value: function applyProps(nextprops) {\n      var prevProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.applyMatrixProps(nextprops, prevProps);\n\n      if (nextprops.index !== undefined) {\n        this.index = nextprops.index;\n      }\n\n      if (nextprops.attributes !== undefined) {\n        this.attributes = nextprops.attributes;\n      }\n\n      this.drawElements = nextprops.drawElements;\n    }\n  }]);\n\n  return InstancedNode;\n}(Node);","map":null,"metadata":{},"sourceType":"module"}