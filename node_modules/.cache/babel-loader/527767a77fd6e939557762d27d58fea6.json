{"ast":null,"code":"import { useMemo } from 'react';\nimport { useStaticBuffer, useAttribute, useWebGLContext } from '@react-vertex/core';\nimport boxGeometry from './boxGeometry';\nimport circleGeometry from './circleGeometry';\nimport cylinderGeometry from './cylinderGeometry';\nimport planeGeometry from './planeGeometry';\nimport torusGeometry from './torusGeometry';\nimport sphereGeometry from './sphereGeometry';\nexport { boxGeometry, circleGeometry, cylinderGeometry, planeGeometry, torusGeometry, sphereGeometry };\nexport function useGeometryElements(geometry) {\n  var gl = useWebGLContext();\n  var positionBuffer = useStaticBuffer(gl, geometry.vertices, false, 'F32');\n  var position = useAttribute(gl, 3, positionBuffer);\n  var normalBuffer = useStaticBuffer(gl, geometry.normals, false, 'F32');\n  var normal = useAttribute(gl, 3, normalBuffer);\n  var uvBuffer = useStaticBuffer(gl, geometry.uvs, false, 'F32');\n  var uv = useAttribute(gl, 2, uvBuffer);\n  var indexBuffer = useStaticBuffer(gl, geometry.indices, true, 'U16');\n  var elements = useMemo(function () {\n    return {\n      index: indexBuffer,\n      count: geometry.indices.length,\n      attributes: {\n        position: position,\n        normal: normal,\n        uv: uv\n      },\n      drawElements: {\n        mode: 'TRIANGLES',\n        count: geometry.indices.length\n      }\n    };\n  }, [indexBuffer, geometry.indices.length, position, normal, uv]);\n  return elements;\n}\nexport function useBoxGeometry(width, height, depth, wCount, hCount, dCount) {\n  var memoized = useMemo(function () {\n    return boxGeometry(width, height, depth, wCount, hCount, dCount);\n  }, [width, height, depth, wCount, hCount, dCount]);\n  return memoized;\n}\nexport function useBoxElements(width, height, depth, wCount, hCount, dCount) {\n  var geom = useBoxGeometry(width, height, depth, wCount, hCount, dCount);\n  var elements = useGeometryElements(geom);\n  return elements;\n}\nexport function useCircleGeometry(radius, segments, thetaStart, thetaLength) {\n  var memoized = useMemo(function () {\n    return circleGeometry(radius, segments, thetaStart, thetaLength);\n  }, [radius, segments, thetaStart, thetaLength]);\n  return memoized;\n}\nexport function useCircleElements(radius, segments, thetaStart, thetaLength) {\n  var geom = useCircleGeometry(radius, segments, thetaStart, thetaLength);\n  var elements = useGeometryElements(geom);\n  return elements;\n}\nexport function useCylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n  var memoized = useMemo(function () {\n    return cylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n  }, [radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength]);\n  return memoized;\n}\nexport function useCylinderElements(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n  var geom = useCylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n  var elements = useGeometryElements(geom);\n  return elements;\n}\nexport function usePlaneGeometry(width, height, widthSegments, heightSegments) {\n  var memoized = useMemo(function () {\n    return planeGeometry(width, height, widthSegments, heightSegments);\n  }, [width, height, widthSegments, heightSegments]);\n  return memoized;\n}\nexport function usePlaneElements(width, height, widthSegments, heightSegments) {\n  var geom = usePlaneGeometry(width, height, widthSegments, heightSegments);\n  var elements = useGeometryElements(geom);\n  return elements;\n}\nexport function useTorusGeometry(radius, tube, radialSegments, tubularSegments, arc) {\n  var memoized = useMemo(function () {\n    return torusGeometry(radius, tube, radialSegments, tubularSegments, arc);\n  }, [radius, tube, radialSegments, tubularSegments, arc]);\n  return memoized;\n}\nexport function useTorusElements(radius, tube, radialSegments, tubularSegments, arc) {\n  var geom = useTorusGeometry(radius, tube, radialSegments, tubularSegments, arc);\n  var elements = useGeometryElements(geom);\n  return elements;\n}\nexport function useSphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {\n  var memoized = useMemo(function () {\n    return sphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength);\n  }, [radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength]);\n  return memoized;\n}\nexport function useSphereElements(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {\n  var geom = useSphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength);\n  var elements = useGeometryElements(geom);\n  return elements;\n}","map":null,"metadata":{},"sourceType":"module"}