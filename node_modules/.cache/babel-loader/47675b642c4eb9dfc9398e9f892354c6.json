{"ast":null,"code":"import { useContext, useMemo } from 'react';\nimport ReactVertexContext from '../Context';\nexport * from './shaders';\nexport * from './buffers';\nexport * from './framebuffers';\nexport * from './lights';\nexport * from './attributes';\nexport * from './uniforms';\nexport * from './textures';\nexport var ctxErr = 'hook must be used in a React Vertex component tree.';\nexport function useRender() {\n  var context = useContext(ReactVertexContext);\n\n  if (!context) {\n    throw Error(\"useRender \".concat(ctxErr));\n  }\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.');\n  }\n\n  return context.scene.render;\n}\nexport function useWebGLContext() {\n  var context = useContext(ReactVertexContext);\n\n  if (!context) {\n    throw new Error(\"useWebGLContext \".concat(ctxErr));\n  }\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.');\n  }\n\n  return context.scene.context;\n}\nexport function useWebGLVersion() {\n  var context = useContext(ReactVertexContext);\n\n  if (!context) {\n    throw new Error(\"useWebGLVersion \".concat(ctxErr));\n  }\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.');\n  }\n\n  return context.scene.webglVersion;\n}\nexport function useSceneNode() {\n  var context = useContext(ReactVertexContext);\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.');\n  }\n\n  return context.scene;\n}\nexport function useCanvas() {\n  var context = useContext(ReactVertexContext);\n\n  if (!context) {\n    throw new Error(\"useCanvas \".concat(ctxErr));\n  }\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.');\n  }\n\n  return context.scene.element;\n}\nexport function useCanvasSize() {\n  var context = useContext(ReactVertexContext);\n\n  if (!context) {\n    throw new Error(\"useCanvasSize \".concat(ctxErr));\n  }\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.');\n  }\n\n  var memoized = useMemo(function () {\n    var _context$scene, _context$scene2;\n\n    return {\n      width: context.width,\n      clientWidth: ((_context$scene = context.scene) === null || _context$scene === void 0 ? void 0 : _context$scene.element.clientWidth) || context.width,\n      height: context.height,\n      clientHeight: ((_context$scene2 = context.scene) === null || _context$scene2 === void 0 ? void 0 : _context$scene2.element.clientHeight) || context.height\n    };\n  }, [context.width, context.height, context.scene.element]);\n  return memoized;\n}","map":null,"metadata":{},"sourceType":"module"}