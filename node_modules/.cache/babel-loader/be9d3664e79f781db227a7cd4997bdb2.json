{"ast":null,"code":"// @ts-nocheck\nimport { unstable_scheduleCallback as schedulePassiveEffects, unstable_cancelCallback as cancelPassiveEffects } from 'scheduler';\nimport warn from 'warning';\nimport { GroupNode, CameraNode, MaterialNode, GeometryNode, InstancedNode } from '../sceneGraph';\nvar NO_CONTEXT = true;\n\nvar NOOP = function NOOP() {};\n\nvar addChild = function addChild(parentInstance, child) {\n  if (typeof child === 'string') {\n    warn(false, 'React Vertex does not support text nodes.');\n    return;\n  }\n\n  parentInstance.add(child);\n};\n\nexport var hostConfig = {\n  schedulePassiveEffects: schedulePassiveEffects,\n  cancelPassiveEffects: cancelPassiveEffects,\n  now: Date.now,\n  prepareForCommit: NOOP,\n  resetAfterCommit: NOOP,\n  getRootHostContext: function getRootHostContext() {\n    return NO_CONTEXT;\n  },\n  getChildHostContext: function getChildHostContext() {\n    return NO_CONTEXT;\n  },\n  shouldSetTextContent: function shouldSetTextContent(type, props) {\n    return typeof props.children === 'string' || typeof props.children === 'number';\n  },\n  createInstance: function createInstance(type, props, internalInstanceHandle) {\n    var instance;\n\n    switch (type) {\n      case 'group':\n        instance = new GroupNode();\n        instance.root = internalInstanceHandle;\n        break;\n\n      case 'camera':\n        instance = new CameraNode();\n        instance.root = internalInstanceHandle;\n        break;\n\n      case 'material':\n        instance = new MaterialNode();\n        instance.root = internalInstanceHandle;\n        break;\n\n      case 'geometry':\n        instance = new GeometryNode();\n        instance.root = internalInstanceHandle;\n        break;\n\n      case 'instancedgeometry':\n        instance = new InstancedNode();\n        instance.root = internalInstanceHandle;\n        break;\n    }\n\n    warn(instance, 'React Vertex does not support the type \"%s\"', type);\n    instance.applyProps(props);\n    return instance;\n  },\n  createTextInstance: function createTextInstance(text) {\n    return text;\n  },\n  resetTextContent: NOOP,\n  getPublicInstance: function getPublicInstance(instance) {\n    return instance;\n  },\n  appendChildToContainer: addChild,\n  removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {\n    parentInstance.remove(child);\n  },\n  appendInitialChild: addChild,\n  appendChild: addChild,\n  removeChild: function removeChild(parentInstance, child) {\n    parentInstance.remove(child);\n  },\n  insertBefore: addChild,\n  insertInContainerBefore: addChild,\n  finalizeInitialChildren: NOOP,\n  supportsMutation: true,\n  prepareUpdate: function prepareUpdate() {\n    return true;\n  },\n  commitUpdate: function commitUpdate(instance, payload, type, oldProps, newProps) {\n    instance.applyProps(newProps, oldProps);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}