{"ast":null,"code":"import { useContext, useMemo, useEffect } from 'react';\nimport ReactVertexContext from '../Context';\nimport { ctxErr, useUniform3fv } from '..';\nvar white = [1, 1, 1];\nvar origin = [0, 0, 0];\nexport function usePointLight() {\n  var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : white;\n  var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : origin;\n  var context = useContext(ReactVertexContext);\n\n  if (!context) {\n    throw new Error(\"usePointLight \".concat(ctxErr));\n  }\n\n  var pointLights = useMemo(function () {\n    if (!context.scene) {\n      throw Error('The scene is not on the context.');\n    }\n\n    return context.scene.pointLights;\n  }, [context]);\n  var light = useMemo(function () {\n    return pointLights.add();\n  }, [pointLights]);\n  useEffect(function () {\n    pointLights.updateDiffuse(light, color);\n  }, [pointLights, light, color]);\n  useEffect(function () {\n    pointLights.updatePosition(light, position);\n  }, [pointLights, light, position]);\n  useEffect(function () {\n    return function () {\n      return pointLights.remove(light);\n    };\n  }, [pointLights, light]);\n}\nexport function usePointLightUniforms(gl, program) {\n  var context = useContext(ReactVertexContext);\n\n  if (!context) {\n    throw new Error(\"usePointLightUniforms \".concat(ctxErr));\n  }\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.');\n  }\n\n  useUniform3fv(gl, program, 'pointLd', context.scene.pointLights.diffuse);\n  useUniform3fv(gl, program, 'pointLp', context.scene.pointLights.position);\n}\nexport function usePointLightCount(vertSource, fragSource) {\n  var context = useContext(ReactVertexContext);\n\n  if (!context) {\n    throw new Error(\"usePointLightCount \".concat(ctxErr));\n  }\n\n  if (!context.scene) {\n    throw Error('The scene is not on the context.');\n  }\n\n  var memoizedVert = useMemo(function () {\n    if (!context.scene) {\n      throw Error('The scene is not on the context.');\n    }\n\n    var count = context.scene.pointLights.instances.length;\n    return vertSource.replace('<<NUM_POINT_LIGHTS>>', \"\".concat(count));\n  }, [vertSource, context.scene.pointLights.instances.length]);\n  var memoizedFrag = useMemo(function () {\n    if (!context.scene) {\n      throw Error('The scene is not on the context.');\n    }\n\n    var count = context.scene.pointLights.instances.length;\n    return fragSource.replace('<<NUM_POINT_LIGHTS>>', \"\".concat(count));\n  }, [fragSource, context.scene.pointLights.instances.length]);\n  return [memoizedVert, memoizedFrag];\n}","map":null,"metadata":{},"sourceType":"module"}