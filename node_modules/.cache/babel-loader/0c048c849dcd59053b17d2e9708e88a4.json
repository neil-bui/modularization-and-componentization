{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar PointLights = /*#__PURE__*/function () {\n  function PointLights() {\n    _classCallCheck(this, PointLights);\n\n    this.instances = [];\n    this.diffuse = [];\n    this.position = [];\n  }\n\n  _createClass(PointLights, [{\n    key: \"add\",\n    value: function add() {\n      var diffuse = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 0];\n      var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n      var index = this.instances.length;\n      var light = {\n        index: index\n      };\n      this.diffuse = [].concat(_toConsumableArray(this.diffuse), _toConsumableArray(diffuse));\n      this.position = [].concat(_toConsumableArray(this.position), _toConsumableArray(position));\n      this.instances.push(light);\n      return light;\n    }\n  }, {\n    key: \"updateDiffuse\",\n    value: function updateDiffuse(_ref, diffuse) {\n      var index = _ref.index;\n\n      var nextDiffuse = _toConsumableArray(this.diffuse);\n\n      nextDiffuse[index * 3 + 0] = diffuse[0];\n      nextDiffuse[index * 3 + 1] = diffuse[1];\n      nextDiffuse[index * 3 + 2] = diffuse[2];\n      this.diffuse = nextDiffuse;\n    }\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition(_ref2, position) {\n      var index = _ref2.index;\n\n      var nextPosition = _toConsumableArray(this.position);\n\n      nextPosition[index * 3 + 0] = position[0];\n      nextPosition[index * 3 + 1] = position[1];\n      nextPosition[index * 3 + 2] = position[2];\n      this.position = nextPosition;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(_ref3) {\n      var index = _ref3.index;\n      var len = this.instances.length * 3;\n      var diffuse = [];\n      var position = [];\n\n      for (var i = 0; i < len; i++) {\n        if (i < index * 3 && i > index * 3 + 2) {\n          diffuse.push(this.diffuse[i]);\n          position.push(this.position[i]);\n        }\n      }\n\n      var nextInstances = [];\n\n      for (var _i = 0; _i < this.instances.length; _i++) {\n        if (this.instances[_i].index < index) {\n          nextInstances.push(this.instances[_i]);\n        } else if (this.instances[_i].index > index) {\n          this.instances[_i].index = this.instances[_i].index - 1;\n          nextInstances.push(this.instances[_i]);\n        }\n      }\n\n      this.diffuse = diffuse;\n      this.position = position;\n      this.instances = nextInstances;\n    }\n  }]);\n\n  return PointLights;\n}();\n\nexport { PointLights as default };","map":null,"metadata":{},"sourceType":"module"}