{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useMemo, useState } from 'react';\nimport { useSceneNode, useWebGLContext } from '..';\n\nfunction applyTextureOptions(gl, texture, data, opts) {\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  var type = opts.type || gl.UNSIGNED_BYTE;\n  var format = opts.format || gl.RGBA;\n  var internalFormat = opts.internalFormat || opts.format || gl.RGBA;\n  gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, format, type, data);\n  var wrapS = opts.wrap || opts.wrapS || gl.REPEAT;\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\n  var wrapT = opts.wrap || opts.wrapT || gl.REPEAT;\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\n  var minFilter = opts.minMag || opts.minFilter || gl.NEAREST_MIPMAP_LINEAR;\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\n  var magFilter = opts.minMag || opts.magFilter || gl.LINEAR;\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\n\n  if (opts.mipmaps !== false) {\n    gl.generateMipmap(gl.TEXTURE_2D);\n  }\n}\n\nvar defaultPlaceholder = new Uint8Array([0, 0, 0, 1]);\nexport function useTexture2d(url, getOptions) {\n  var gl = useWebGLContext();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var memoized = useMemo(function () {\n    var texture = gl.createTexture();\n    var options = getOptions ? getOptions(gl) : {};\n    var placeholder = options.placeholder || defaultPlaceholder;\n    gl.bindTexture(gl.TEXTURE_2D, texture); // prettier-ignore\n\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, placeholder);\n    return texture;\n  }, [gl]);\n  useEffect(function () {\n    var options = getOptions ? getOptions(gl) : {};\n\n    if (data && memoized) {\n      applyTextureOptions(gl, memoized, data, options);\n    }\n  }, [gl, memoized, data]);\n  useEffect(function () {\n    var _ref = getOptions ? getOptions(gl) : {},\n        _ref$crossOrigin = _ref.crossOrigin,\n        crossOrigin = _ref$crossOrigin === void 0 ? null : _ref$crossOrigin;\n\n    var img = new Image();\n    img.crossOrigin = crossOrigin || '';\n    img.src = url;\n    img.addEventListener('load', function () {\n      return setData(img);\n    });\n  }, [url]);\n  return [memoized, !!data];\n}\nexport function useDataTexture(gl, data, width, height, getOptions) {\n  var memoized = useMemo(function () {\n    var texture = gl.createTexture();\n    var options = getOptions ? getOptions(gl) : {};\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    var type = options.type || gl.FLOAT;\n    var format = options.format || gl.RGBA;\n    var internalFormat = options.internalFormat || options.format || gl.RGBA; // prettier-ignore\n\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, format, type, data);\n    var minFilter = options.minMag || options.minFilter || gl.NEAREST;\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\n    var magFilter = options.minMag || options.magFilter || gl.NEAREST;\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\n    var wrapS = options.wrap || options.wrapS || gl.CLAMP_TO_EDGE;\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\n    var wrapT = options.wrap || options.wrapT || gl.CLAMP_TO_EDGE;\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\n    return texture;\n  }, [gl, data, width, height]);\n  return memoized;\n}\nexport function useTextureUnit() {\n  var scene = useSceneNode();\n  var memoized = useMemo(function () {\n    return scene.getTextureUnit();\n  }, [scene]);\n  useEffect(function () {\n    return function () {\n      return scene.releaseTextureUnit(memoized);\n    };\n  }, [scene, memoized]);\n  return memoized;\n}","map":null,"metadata":{},"sourceType":"module"}