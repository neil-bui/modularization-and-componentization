{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { mat4 } from 'gl-matrix';\nimport { SceneNode } from './SceneNode';\nexport var isGraphNode = Symbol('isGraphNode');\n\nvar GraphNode = /*#__PURE__*/function () {\n  function GraphNode() {\n    _classCallCheck(this, GraphNode);\n\n    this.parent = void 0;\n    this.children = void 0;\n    this.matrix = void 0;\n    this.worldMatrix = void 0;\n    this.needsMatrixUpdate = void 0;\n    this.userManagedMatrix = void 0;\n    this.position = void 0;\n    this.rotation = void 0;\n    this.scale = void 0;\n    this.root = void 0;\n    this[isGraphNode] = true;\n    this.children = [];\n    this.matrix = mat4.create();\n    this.worldMatrix = mat4.create();\n    this.needsMatrixUpdate = false;\n    this.userManagedMatrix = false;\n  }\n\n  _createClass(GraphNode, [{\n    key: \"add\",\n    value: function add(child) {\n      child.parent = this;\n      child.updateWorldMatrix();\n      this.children.push(child);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(child) {\n      var index = this.children.findIndex(function (d) {\n        return d === child;\n      });\n\n      if (index >= 0) {\n        delete this.children[index].parent;\n        this.children.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"updateWorldMatrix\",\n    value: function updateWorldMatrix() {\n      if (this instanceof SceneNode) {\n        mat4.copy(this.worldMatrix, this.matrix);\n      } else if (this.parent) {\n        mat4.multiply(this.worldMatrix, this.parent.worldMatrix, this.matrix);\n      }\n    }\n  }, {\n    key: \"updateMatrix\",\n    value: function updateMatrix() {\n      if (this.userManagedMatrix) {\n        return;\n      }\n\n      mat4.identity(this.matrix);\n\n      if (this.position) {\n        mat4.translate(this.matrix, this.matrix, this.position);\n      }\n\n      if (this.rotation) {\n        var _this$rotation = _slicedToArray(this.rotation, 3),\n            x = _this$rotation[0],\n            y = _this$rotation[1],\n            z = _this$rotation[2];\n\n        x && mat4.rotateX(this.matrix, this.matrix, x);\n        y && mat4.rotateY(this.matrix, this.matrix, y);\n        z && mat4.rotateZ(this.matrix, this.matrix, z);\n      }\n\n      if (this.scale) {\n        mat4.scale(this.matrix, this.matrix, this.scale);\n      }\n    }\n  }, {\n    key: \"applyMatrixProps\",\n    value: function applyMatrixProps(nextprops, prevProps) {\n      if (nextprops.matrix) {\n        this.matrix = nextprops.matrix;\n        this.userManagedMatrix = true;\n        this.updateWorldMatrix();\n        this.children.forEach(function (c) {\n          return c.needsMatrixUpdate = true;\n        });\n      } else if (nextprops.position !== prevProps.position || nextprops.rotation !== prevProps.rotation || nextprops.scale !== prevProps.scale) {\n        this.position = nextprops.position;\n        this.rotation = nextprops.rotation;\n        this.scale = nextprops.scale;\n        this.needsMatrixUpdate = true;\n      }\n\n      if (this.root && this.root.renderOnUpdate) {\n        this.root.requestRender();\n      }\n    }\n  }]);\n\n  return GraphNode;\n}();\n\nexport { GraphNode as default };","map":null,"metadata":{},"sourceType":"module"}