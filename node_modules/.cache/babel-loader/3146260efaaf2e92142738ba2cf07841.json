{"ast":null,"code":"// Adapted from:\n// https://github.com/mrdoob/three.js/blob/dev/src/geometries/SphereGeometry.js\n// @author mrdoob / http://mrdoob.com/\n// @author benaadams / https://twitter.com/ben_a_adams\n// @author Mugen87 / https://github.com/Mugen87\n// The MIT License\n// Copyright Â© 2010-2019 three.js authors\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default function SphereGeometry() {\n  var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var widthSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  var heightSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 6;\n  var phiStart = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var phiLength = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Math.PI * 2;\n  var thetaStart = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  var thetaLength = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : Math.PI;\n  widthSegments = Math.max(3, Math.floor(widthSegments));\n  heightSegments = Math.max(2, Math.floor(heightSegments));\n  var thetaEnd = thetaStart + thetaLength;\n  var ix,\n      iy,\n      index = 0;\n  var grid = [];\n  var vertex = new Array(3);\n  var normal = new Array(3);\n  var indices = [];\n  var vertices = [];\n  var normals = [];\n  var uvs = [];\n\n  for (iy = 0; iy <= heightSegments; iy++) {\n    var verticesRow = [];\n    var v = iy / heightSegments;\n    var uOffset = iy == 0 ? 0.5 / widthSegments : iy == heightSegments ? -0.5 / widthSegments : 0;\n\n    for (ix = 0; ix <= widthSegments; ix++) {\n      var u = ix / widthSegments;\n      vertex[0] = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n      vertex[1] = radius * Math.cos(thetaStart + v * thetaLength);\n      vertex[2] = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n      vertices.push.apply(vertices, vertex);\n      normal[0] = vertex[0];\n      normal[1] = vertex[1];\n      normal[2] = vertex[2];\n      var len = Math.sqrt(normal[0] * normal[0] + normal[1] * normal[1] + normal[2] * normal[2]);\n      normal[0] *= 1 / (len || 1);\n      normal[1] *= 1 / (len || 1);\n      normal[2] *= 1 / (len || 1);\n      normals.push.apply(normals, normal);\n      uvs.push(u + uOffset, 1 - v);\n      verticesRow.push(index++);\n    }\n\n    grid.push(verticesRow);\n  }\n\n  for (iy = 0; iy < heightSegments; iy++) {\n    for (ix = 0; ix < widthSegments; ix++) {\n      var a = grid[iy][ix + 1];\n      var b = grid[iy][ix];\n      var c = grid[iy + 1][ix];\n      var d = grid[iy + 1][ix + 1];\n      if (iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n      if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n    }\n  }\n\n  return {\n    indices: indices,\n    vertices: vertices,\n    normals: normals,\n    uvs: uvs\n  };\n}","map":null,"metadata":{},"sourceType":"module"}