{"ast":null,"code":"// Adapted from:\n// https://github.com/mrdoob/three.js/blob/dev/src/geometries/PlaneGeometry.js\n// @author mrdoob / http://mrdoob.com/\n// @author Mugen87 / https://github.com/Mugen87\n// The MIT License\n// Copyright Â© 2010-2019 three.js authors\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default function PlaneBufferGeometry() {\n  var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var widthSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var heightSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var width_half = width / 2;\n  var height_half = height / 2;\n  var gridX = Math.floor(widthSegments);\n  var gridY = Math.floor(heightSegments);\n  var gridX1 = gridX + 1;\n  var gridY1 = gridY + 1;\n  var segment_width = width / gridX;\n  var segment_height = height / gridY;\n  var ix, iy;\n  var indices = [];\n  var vertices = [];\n  var normals = [];\n  var uvs = [];\n\n  for (iy = 0; iy < gridY1; iy++) {\n    var y = iy * segment_height - height_half;\n\n    for (ix = 0; ix < gridX1; ix++) {\n      var x = ix * segment_width - width_half;\n      vertices.push(x, -y, 0);\n      normals.push(0, 0, 1);\n      uvs.push(ix / gridX);\n      uvs.push(1 - iy / gridY);\n    }\n  }\n\n  for (iy = 0; iy < gridY; iy++) {\n    for (ix = 0; ix < gridX; ix++) {\n      var a = ix + gridX1 * iy;\n      var b = ix + gridX1 * (iy + 1);\n      var c = ix + 1 + gridX1 * (iy + 1);\n      var d = ix + 1 + gridX1 * iy;\n      indices.push(a, b, d);\n      indices.push(b, c, d);\n    }\n  }\n\n  return {\n    indices: indices,\n    vertices: vertices,\n    normals: normals,\n    uvs: uvs\n  };\n}","map":null,"metadata":{},"sourceType":"module"}