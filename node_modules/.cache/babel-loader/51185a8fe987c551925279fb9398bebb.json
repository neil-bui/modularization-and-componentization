{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { vec3, vec4, mat4 } from 'gl-matrix';\nimport throttle from 'lodash.throttle';\nexport var OrbitCamera = /*#__PURE__*/function () {\n  function OrbitCamera(fov, aspect) {\n    var near = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    var far = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;\n\n    _classCallCheck(this, OrbitCamera);\n\n    this.projection = void 0;\n    this.view = void 0;\n    this.matrix = void 0;\n    this.position = vec3.create();\n    this.up = vec3.create();\n    this.right = vec3.create();\n    this.normal = vec3.create();\n    this.userRotate = true;\n    this.userRotateX = true;\n    this.userRotateY = true;\n    this.userDolly = true;\n    this.rotX = 0;\n    this.rotY = 0;\n    this.steps = 0;\n    this.listeners = [];\n    this.matrix = mat4.create();\n    this.view = mat4.create();\n    mat4.invert(this.view, this.matrix);\n    var radians = fov * Math.PI / 180.0;\n    this.projection = mat4.create();\n    mat4.perspective(this.projection, radians, aspect, near, far);\n  }\n\n  _createClass(OrbitCamera, [{\n    key: \"setProjection\",\n    value: function setProjection(fov, aspect) {\n      var near = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var far = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;\n      var radians = fov * Math.PI / 180.0;\n      mat4.perspective(this.projection, radians, aspect, near, far);\n    }\n  }, {\n    key: \"dolly\",\n    value: function dolly(delta) {\n      if (this.userDolly) {\n        var next = vec3.create();\n        var step = delta - this.steps;\n        next[0] = this.position[0];\n        next[1] = this.position[1];\n        next[2] = this.position[2] - step;\n        this.steps = delta;\n        this.setPosition(next);\n      }\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(position) {\n      this.position[0] = position[0] || 0;\n      this.position[1] = position[1] || 0;\n      this.position[2] = position[2] || 0;\n      this.update();\n    }\n  }, {\n    key: \"upRightNormal\",\n    value: function upRightNormal() {\n      var up = vec4.create();\n      vec4.set(up, 0, 1, 0, 0);\n      vec4.transformMat4(up, up, this.matrix);\n      vec3.copy(this.up, up);\n      var right = vec4.create();\n      vec4.set(right, 1, 0, 0, 0);\n      vec4.transformMat4(right, right, this.matrix);\n      vec3.copy(this.right, right);\n      var normal = vec4.create();\n      vec4.set(normal, 0, 0, 1, 0);\n      vec4.transformMat4(normal, normal, this.matrix);\n      vec3.copy(this.normal, normal);\n    }\n  }, {\n    key: \"setRotationX\",\n    value: function setRotationX(rotX) {\n      this.rotX = rotX;\n\n      if (this.rotX > 360 || this.rotX < -360) {\n        this.rotX = this.rotX % 360;\n      }\n\n      this.update();\n    }\n  }, {\n    key: \"incRotationX\",\n    value: function incRotationX(rotX) {\n      if (this.userRotate && this.userRotateX) {\n        this.rotX += rotX;\n\n        if (this.rotX > 360 || this.rotX < -360) {\n          this.rotX = this.rotX % 360;\n        }\n\n        this.update();\n      }\n    }\n  }, {\n    key: \"setRotationY\",\n    value: function setRotationY(rotY) {\n      this.rotY = rotY;\n\n      if (this.rotY > 360 || this.rotY < -360) {\n        this.rotY = this.rotY % 360;\n      }\n\n      this.update();\n    }\n  }, {\n    key: \"incRotationY\",\n    value: function incRotationY(rotY) {\n      if (this.userRotate && this.userRotateY) {\n        this.rotY += rotY;\n\n        if (this.rotY > 360 || this.rotY < -360) {\n          this.rotY = this.rotY % 360;\n        }\n\n        this.update();\n      }\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener(func) {\n      var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n      var listener = throttle(func, wait);\n      this.listeners.push({\n        listener: listener,\n        id: func\n      });\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(func) {\n      var index = this.listeners.findIndex(function (d) {\n        return d.id === func;\n      });\n\n      if (index !== -1) {\n        this.listeners.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"exportView\",\n    value: function exportView() {\n      return mat4.clone(this.view);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this = this;\n\n      mat4.identity(this.matrix);\n      mat4.rotateX(this.matrix, this.matrix, this.rotX * Math.PI / 180);\n      mat4.rotateY(this.matrix, this.matrix, this.rotY * Math.PI / 180);\n      mat4.translate(this.matrix, this.matrix, this.position);\n      mat4.invert(this.view, this.matrix);\n      this.upRightNormal();\n      this.listeners.forEach(function (item) {\n        item.listener(_this);\n      });\n    }\n  }]);\n\n  return OrbitCamera;\n}();","map":null,"metadata":{},"sourceType":"module"}