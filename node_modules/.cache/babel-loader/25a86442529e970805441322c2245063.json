{"ast":null,"code":"import { useMemo, useEffect } from 'react';\nimport warn from 'warning';\nvar prefix = 'react-vertex:';\n\nfunction log(source) {\n  if (typeof source !== 'string') {\n    warn(false, \"\".concat(prefix, \" Shader source should be a string!\"));\n    return '';\n  }\n\n  var lines = source.split('\\n');\n\n  for (var i = 0; i < lines.length; i++) {\n    lines[i] = i + 1 + ': ' + lines[i];\n  }\n\n  return lines.join('\\n');\n}\n\nfunction useShader(gl, source) {\n  var isVertShader = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var memoized = useMemo(function () {\n    var _gl$getShaderPrecisio, _gl$getShaderPrecisio2;\n\n    if (source.constructor === WebGLShader) {\n      return source;\n    }\n\n    var shaderType = isVertShader ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER;\n    var shader = gl.createShader(shaderType);\n    var precision = 'lowp'; // prettier-ignore\n\n    if ((_gl$getShaderPrecisio = gl.getShaderPrecisionFormat(shaderType, gl.HIGH_FLOAT)) !== null && _gl$getShaderPrecisio !== void 0 && _gl$getShaderPrecisio.precision || 0 > 0) {\n      precision = 'highp';\n    } else if ((_gl$getShaderPrecisio2 = gl.getShaderPrecisionFormat(shaderType, gl.MEDIUM_FLOAT)) !== null && _gl$getShaderPrecisio2 !== void 0 && _gl$getShaderPrecisio2.precision || 0 > 0) {\n      precision = 'mediump';\n    }\n\n    var prepped = source.replace('<<FLOAT_PRECISION>>', precision);\n\n    if (shader) {\n      gl.shaderSource(shader, prepped);\n      gl.compileShader(shader);\n      warn(gl.getShaderParameter(shader, gl.COMPILE_STATUS), \"\".concat(prefix, \"\\n\").concat(gl.getShaderInfoLog(shader), \"\\n\").concat(log(prepped)));\n    } else {\n      warn(false, \"\".concat(prefix, \"\\nShader could not be compiled. Source:\\n\").concat(source));\n    }\n\n    return shader;\n  }, [gl, source, isVertShader]);\n  return memoized;\n}\n\nexport function useProgram(gl, vertSource, fragSource) {\n  var vert = useShader(gl, vertSource, true);\n  var frag = useShader(gl, fragSource, false);\n  var memoized = useMemo(function () {\n    var program = gl.createProgram();\n\n    if (program && vert && frag) {\n      gl.attachShader(program, vert);\n      gl.attachShader(program, frag);\n      gl.linkProgram(program);\n      warn(gl.getProgramParameter(program, gl.LINK_STATUS), \"\".concat(prefix, \" Error creating program\"));\n    } else {\n      throw Error('Program could not be created.');\n    }\n\n    return program;\n  }, [gl, vert, frag]);\n  useEffect(function () {\n    return function () {\n      return gl.deleteProgram(memoized);\n    };\n  }, [gl, memoized]);\n  gl.useProgram(memoized);\n  return memoized;\n}\nexport function useProgramUniforms(gl, program) {\n  var memoized = useMemo(function () {\n    var uniforms = {};\n    var uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    for (var i = 0; i < uniformCount; i++) {\n      var _gl$getActiveUniform;\n\n      var _name = (_gl$getActiveUniform = gl.getActiveUniform(program, i)) === null || _gl$getActiveUniform === void 0 ? void 0 : _gl$getActiveUniform.name;\n\n      if (_name) {\n        uniforms[_name] = gl.getUniformLocation(program, _name);\n      }\n    }\n\n    return uniforms;\n  }, [gl, program]);\n  return memoized;\n}","map":null,"metadata":{},"sourceType":"module"}