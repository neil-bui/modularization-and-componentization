{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useRef, useState, useEffect } from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\nvar isBrowser = typeof window !== 'undefined';\nexport function useMeasure(ref) {\n  var _useState = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      bounds = _useState2[0],\n      set = _useState2[1];\n\n  var resizeObserver = useRef(new ResizeObserver(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        entry = _ref2[0];\n\n    return set(entry.contentRect);\n  }));\n  useEffect(function () {\n    var observer = resizeObserver.current;\n\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return function () {\n      return observer.disconnect();\n    };\n  }, [ref.current, resizeObserver]);\n  return bounds;\n}\nexport function useViewportSize() {\n  var _useState3 = useState({\n    width: isBrowser ? window.innerWidth : 1,\n    height: isBrowser ? window.innerHeight : 1\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dimensions = _useState4[0],\n      setDimensions = _useState4[1];\n\n  useEffect(function () {\n    var updateDimensions = function updateDimensions() {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n\n    isBrowser && window.addEventListener('resize', updateDimensions);\n    return function () {\n      isBrowser && window.removeEventListener('resize', updateDimensions);\n    };\n  }, [setDimensions]);\n  return dimensions;\n}","map":null,"metadata":{},"sourceType":"module"}