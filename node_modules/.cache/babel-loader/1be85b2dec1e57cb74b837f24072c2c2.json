{"ast":null,"code":"// Adapted from:\n//https://github.com/mrdoob/three.js/blob/dev/src/geometries/CircleGeometry.js\n// @author benaadams / https://twitter.com/ben_a_adams\n// @author Mugen87 / https://github.com/Mugen87\n// @author hughes\n// The MIT License\n// Copyright Â© 2010-2019 three.js authors\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default function circleGeometry() {\n  var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var segments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  var thetaStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var thetaLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Math.PI * 2;\n  segments = Math.max(3, segments);\n  var indices = [];\n  var vertices = [];\n  var normals = [];\n  var uvs = [];\n  var i, s;\n  var vertex = new Array(3);\n  var uv = new Array(2);\n  vertices.push(0, 0, 0);\n  normals.push(0, 0, 1);\n  uvs.push(0.5, 0.5);\n\n  for (s = 0, i = 3; s <= segments; s++, i += 3) {\n    var segment = thetaStart + s / segments * thetaLength;\n    vertex[0] = radius * Math.cos(segment);\n    vertex[1] = radius * Math.sin(segment);\n    vertices.push(vertex[0], vertex[1], 0);\n    normals.push(0, 0, 1);\n    uv[0] = (vertices[i] / radius + 1) / 2;\n    uv[1] = (vertices[i + 1] / radius + 1) / 2;\n    uvs.push(uv[0], uv[1]);\n  }\n\n  for (i = 1; i <= segments; i++) {\n    indices.push(i, i + 1, 0);\n  }\n\n  return {\n    indices: indices,\n    vertices: vertices,\n    normals: normals,\n    uvs: uvs\n  };\n}","map":null,"metadata":{},"sourceType":"module"}